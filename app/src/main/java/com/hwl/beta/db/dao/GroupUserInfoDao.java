package com.hwl.beta.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hwl.beta.db.entity.GroupUserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_USER_INFO".
*/
public class GroupUserInfoDao extends AbstractDao<GroupUserInfo, Void> {

    public static final String TABLENAME = "GROUP_USER_INFO";

    /**
     * Properties of entity GroupUserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GroupGuid = new Property(0, String.class, "groupGuid", false, "GROUP_GUID");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property UserHeadImage = new Property(3, String.class, "userHeadImage", false, "USER_HEAD_IMAGE");
        public final static Property AddTime = new Property(4, java.util.Date.class, "addTime", false, "ADD_TIME");
    }


    public GroupUserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GroupUserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_USER_INFO\" (" + //
                "\"GROUP_GUID\" TEXT," + // 0: groupGuid
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"USER_HEAD_IMAGE\" TEXT," + // 3: userHeadImage
                "\"ADD_TIME\" INTEGER);"); // 4: addTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupUserInfo entity) {
        stmt.clearBindings();
 
        String groupGuid = entity.getGroupGuid();
        if (groupGuid != null) {
            stmt.bindString(1, groupGuid);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userHeadImage = entity.getUserHeadImage();
        if (userHeadImage != null) {
            stmt.bindString(4, userHeadImage);
        }
 
        java.util.Date addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(5, addTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupUserInfo entity) {
        stmt.clearBindings();
 
        String groupGuid = entity.getGroupGuid();
        if (groupGuid != null) {
            stmt.bindString(1, groupGuid);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userHeadImage = entity.getUserHeadImage();
        if (userHeadImage != null) {
            stmt.bindString(4, userHeadImage);
        }
 
        java.util.Date addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(5, addTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GroupUserInfo readEntity(Cursor cursor, int offset) {
        GroupUserInfo entity = new GroupUserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // groupGuid
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userHeadImage
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // addTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupUserInfo entity, int offset) {
        entity.setGroupGuid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserHeadImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GroupUserInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GroupUserInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(GroupUserInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
