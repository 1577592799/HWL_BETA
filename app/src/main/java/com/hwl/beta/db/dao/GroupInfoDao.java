package com.hwl.beta.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hwl.beta.db.entity.GroupInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_INFO".
*/
public class GroupInfoDao extends AbstractDao<GroupInfo, Void> {

    public static final String TABLENAME = "GROUP_INFO";

    /**
     * Properties of entity GroupInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GroupGuid = new Property(0, String.class, "groupGuid", false, "GROUP_GUID");
        public final static Property GroupName = new Property(1, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupImage = new Property(2, String.class, "groupImage", false, "GROUP_IMAGE");
        public final static Property GroupUserCount = new Property(3, int.class, "groupUserCount", false, "GROUP_USER_COUNT");
        public final static Property GroupNote = new Property(4, String.class, "groupNote", false, "GROUP_NOTE");
        public final static Property BuildTime = new Property(5, java.util.Date.class, "buildTime", false, "BUILD_TIME");
    }


    public GroupInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GroupInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_INFO\" (" + //
                "\"GROUP_GUID\" TEXT UNIQUE ," + // 0: groupGuid
                "\"GROUP_NAME\" TEXT," + // 1: groupName
                "\"GROUP_IMAGE\" TEXT," + // 2: groupImage
                "\"GROUP_USER_COUNT\" INTEGER NOT NULL ," + // 3: groupUserCount
                "\"GROUP_NOTE\" TEXT," + // 4: groupNote
                "\"BUILD_TIME\" INTEGER);"); // 5: buildTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupInfo entity) {
        stmt.clearBindings();
 
        String groupGuid = entity.getGroupGuid();
        if (groupGuid != null) {
            stmt.bindString(1, groupGuid);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(2, groupName);
        }
 
        String groupImage = entity.getGroupImage();
        if (groupImage != null) {
            stmt.bindString(3, groupImage);
        }
        stmt.bindLong(4, entity.getGroupUserCount());
 
        String groupNote = entity.getGroupNote();
        if (groupNote != null) {
            stmt.bindString(5, groupNote);
        }
 
        java.util.Date buildTime = entity.getBuildTime();
        if (buildTime != null) {
            stmt.bindLong(6, buildTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupInfo entity) {
        stmt.clearBindings();
 
        String groupGuid = entity.getGroupGuid();
        if (groupGuid != null) {
            stmt.bindString(1, groupGuid);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(2, groupName);
        }
 
        String groupImage = entity.getGroupImage();
        if (groupImage != null) {
            stmt.bindString(3, groupImage);
        }
        stmt.bindLong(4, entity.getGroupUserCount());
 
        String groupNote = entity.getGroupNote();
        if (groupNote != null) {
            stmt.bindString(5, groupNote);
        }
 
        java.util.Date buildTime = entity.getBuildTime();
        if (buildTime != null) {
            stmt.bindLong(6, buildTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GroupInfo readEntity(Cursor cursor, int offset) {
        GroupInfo entity = new GroupInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // groupGuid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupImage
            cursor.getInt(offset + 3), // groupUserCount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupNote
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // buildTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupInfo entity, int offset) {
        entity.setGroupGuid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGroupName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupUserCount(cursor.getInt(offset + 3));
        entity.setGroupNote(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBuildTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GroupInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GroupInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(GroupInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
